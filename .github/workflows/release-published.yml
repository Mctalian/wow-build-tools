name: Build and Release Binaries
on:
  release:
    types: [published]

permissions: {}

env:
  CMD: wow-build-tools

jobs:
  move-major-tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Create or Update Major Version Tag
        uses: actions/github-script@v7
        with:
          script: |
            const fullVersion = process.env.GITHUB_REF_NAME;
            const majorVersion = fullVersion.split('.')[0];
            const tagName = fullVersion.includes('-') ? `${majorVersion}-${fullVersion.split('-')[1].split('.')[0]}` : majorVersion;

            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${tagName}`,
              sha: context.sha
            }).catch(async (error) => {
              if (error.status === 422) {
                await github.rest.git.updateRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `tags/${tagName}`,
                  sha: context.sha,
                  force: true
                });
              } else {
                throw error;
              }
            });

  setup-go:
    # Do it once, leverage cache for subsequent jobs.
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache-dependency-path: |
            go.sum

      - name: Go cache paths
        id: go-cache-paths
        run: |
          chmod -R 0755 $(go env GOCACHE)
          chmod -R 0755 $(go env GOMODCACHE)
          echo "go-build=$(go env GOCACHE)" >> $GITHUB_OUTPUT
          echo "go-mod=$(go env GOMODCACHE)" >> $GITHUB_OUTPUT

      # Cache go build cache, used to speedup go test
      - name: Go Build Cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}

      # Cache go mod cache, used to speedup builds
      - name: Go Mod Cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      - name: Install Go dependencies
        run: go mod download

  build:
    runs-on: ubuntu-latest
    needs: setup-go
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
    permissions:
      contents: write
    env:
      # Use the Git tag as the version (for example, "v1.2.3" or "v1.2.3-alpha.1")
      VERSION: ${{ github.ref_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache-dependency-path: |
            go.sum

      - name: Go cache paths
        id: go-cache-paths
        run: |
          chmod -R 0755 $(go env GOCACHE)
          chmod -R 0755 $(go env GOMODCACHE)
          echo "go-build=$(go env GOCACHE)" >> $GITHUB_OUTPUT
          echo "go-mod=$(go env GOMODCACHE)" >> $GITHUB_OUTPUT

      # Cache go build cache, used to speedup go test
      - name: Go Build Cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}

      # Cache go mod cache, used to speedup builds
      - name: Go Mod Cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      - name: Replace version token in source
        run: |
          echo "Replacing version constant with ${VERSION}"
          sed -i "s/const version = \"LOCAL\"/const version = \"${VERSION}\"/" ./internal/update/updatebin.go

      - name: Build binary
        run: |
          mkdir -p build
          ext=""
          if [ "${{ matrix.goos }}" = "windows" ]; then ext=".exe"; fi
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o build/${CMD}_${{ matrix.goos }}_${{ matrix.goarch }}${ext} .

      - name: Zip binary
        run: |
          # Determine the file extension based on OS.
          ext=""
          if [ "${{ matrix.goos }}" = "windows" ]; then ext=".exe"; fi
          binaryFile="build/${{ env.CMD }}_${{ matrix.goos }}_${{ matrix.goarch }}${ext}"
          zipFile="build/${{ env.CMD }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip"
          echo "Zipping ${binaryFile} to ${zipFile}"
          zip -j ${zipFile} ${binaryFile}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: zip-${{ env.CMD }}_${{ matrix.goos }}_${{ matrix.goarch }}
          path: build/${{ env.CMD }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip

  upload-assets:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    outputs:
      release-type: ${{ steps.release-type.outputs.release-type }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          path: archived-binaries
          pattern: zip-*
          merge-multiple: true

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          # The glob pattern matches the asset that follows your naming convention.
          files: archived-binaries/*.zip

      - name: Output release type
        id: release-type
        run: |
          if [[ ${{ github.ref_name }} == *alpha* ]]; then
            release_type="alpha"
          elif [[ ${{ github.ref_name }} == *beta* ]]; then
            release_type="beta"
          else
            release_type="release"
          fi
          echo "release-type=${release_type}" >> $GITHUB_OUTPUT

      - name: Zip the zips
        run: |
          cd archived-binaries
          zip -r ../${{ env.CMD }}.zip .

      - name: Upload the zipped zips
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.CMD }}
          path: ${{ env.CMD }}.zip

  distribute:
    runs-on: ubuntu-latest
    needs: upload-assets
    strategy:
      matrix:
        distro: [curse, wago, wowi]
    env:
      CURSE_ID: 1198075
      WAGO_ID: QKywW7N7
      WOWI_ID: 26905
      CF_API_KEY: ${{ secrets.CF_API_KEY }}
      WOWI_API_TOKEN: ${{ secrets.WOWI_API_TOKEN }}
      WAGO_API_TOKEN: ${{ secrets.WAGO_API_TOKEN }}
      COMMON_ARGS: "--interface-versions=110000 -i ./wow-build-tools.zip -l ${{ github.ref_name }} -r ${{ needs.upload-assets.outputs.release-type }} -V"
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.CMD }}

      - name: Download binary
        uses: actions/download-artifact@v4
        with:
          name: zip-${{ env.CMD }}_linux_amd64

      - name: Extract the linux binary
        run: |
          mkdir -p ./bin
          unzip -j ${{ env.CMD }}_linux_amd64.zip -d ./bin

      - name: Upload to CurseForge
        if: ${{ matrix.distro == 'curse' }}
        run: |
          ./bin/${{ env.CMD }}_linux_amd64 upload curse -p ${{ env.CURSE_ID }} ${{ env.COMMON_ARGS }}

      - name: Upload to Wago
        if: ${{ matrix.distro == 'wago' }}
        run: |
          ./bin/${{ env.CMD }}_linux_amd64 upload wago -a ${{ env.WAGO_ID }} ${{ env.COMMON_ARGS }}

      - name: Upload to WoWInterface
        if: ${{ matrix.distro == 'wowi' }}
        run: |
          ./bin/${{ env.CMD }}_linux_amd64 upload wowi -w ${{ env.WOWI_ID }} ${{ env.COMMON_ARGS }} --project-version=${{ github.ref_name }}
